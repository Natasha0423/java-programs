Access Modifier:-
Access Modifier

Encapsulation:-
class atul
{
	int a=10;
	void as()
	{
		s.o.p(a);
	}
} 
Object and class :-

Object Cloning :-
class atul imlements Cloneable
{
	int a;
	atul(int a)	
	{
		this.a=a;
	}
	public static void clone()throws Exception	
	{
		return super.clone();
	}
	p.s.v.m()
	{
		try
		{
			atul ob=new atul(10);
			atul obj=(atul)ob.clone();
			s.o.p(ob.a);
			s.o.p(obj.a);
		}
		carch(Exception e)
		{
		}
	}
}
Math:- 
import java.lang.Math.*;

1) .abs(a);          //  Return the absalute value
		a=12.5;		// 12.5
		a=12.6;		//12.6
2) max(a,b);    // Max  
		a=10;
		b=20;
		s.o.p(Math.max(a,b));  //20
3)min(a,b);     //min
		a=10;
		b=20;
		s.o.p(Math.min(a,b));  //10
4)round(a);     // round of
		a=10.5;       //10
		a=10.6;      //11
5)sqrt(a);        //square  of any value
		a=2;       //2*2
		a=3;       //3*3
6)cbrt(a);      //  cudbe  
		a=2;	//    2*2*2
7)pow(a,b);   //  a^b
		a=2	
		b=3
		pow(a,b);    // 2^3
		pow(b,a);   //3^2
8)signnum(a);       zero    zero
	                positive      +1
	                negatiive   -1
		a=10;      
		signnum(a);   // +1
		a=-10;
		signnum(a);   //-1
9) ceil(a);               // smallest intiger value
		10.4    //10
		10.5   //10.
10)   copySign(a,b);     //   a=10;
		        b=-12;
		      copySign(a,b);       -10
		       copySign(b,a);	12
11) floor(a);     /// a=744.93;	
  	             floor(a);          //   744
	             a=-39.28;   // 4,5
	             floor(a);         //  -40
12) floorDiv(a,b);      a=25
		b=2
		 floorDiv(a,b);    //25/2  =   -12.1;  //12
13) random();           //     0.1  to 1.0.
		  //  0.12548585414;
14) rint(a)                   //if the argument is negative or positive it return a integer value that is even.
		a=81.68;         //82.0
		a=-37.25;        //-38
		a=80.5;	    //80.0
		a=79.5;	   //80.0
15) hypot(a,b);	//a=2
		   b=3;
			a^2+b^2
16)ulp(a);                       //    if the value is
		      +/-   Double   //2^971.
		      +/-   Float       //  2^104.
		Double a= 12.4588;    //2^971
		floata= 12.4588;    //2^104
17)addExact(a,b);	//a=10
		   b=20
		   addExact(a,b);     //30
18)subExact(a,b);	// a=10
		   b=20
		   subExact(a,b);    //-10
19) mltiplyExact(a,b);  //a=2
		   b=3
		   mltiplyExact(a,b);    //6
20)incrementExact(a);   // a=7;       //8
		      //a=-5;      //-4
21) decrementExact(a);  //a=10;     //9
		       //a=-4;     //-5
22)negateExact(a);      //a=25;         //-25
23)toIntExact(a);             //a=25;      //25
	     	     //a=-25;    //-25

log();
log10();
log1p();
exp();
expm1();

sin();
cos();
tan();
asin();
acos();
atan();

sinh();
cosh();
tanh();

Math.sin(a);

toDegrees();

toRadiaus();

Serialization:- We can convert private value in to object(Wapper Class).
Primitive  type              Wrapper Class 
boolean 		       Boolean
char 		      Characeter
byte  		     Byte
short   		    Short 
int 		   Integer 
long 		    Long 
float 		   Float

Autoboxing :- convert private value in to wraper calss.
public class atul
{
	void as()
	{
		float  a=10.2;
		Integer b=Integer.valueOf(a);		
		
	}
}
Unboxing:- convert Wraper class in to primitive.
public void atul
{
	void as()
	{
		Integer a=new Integer(3);
		int b=a.intValue();
		
		
	}
}
Call by value:-
Call by Reference:- Not Support in JAVA.

Strictfp Keyword:- 150.25
		150.25698
		
You will get the same result on every plaeform. if you will perform operations in the floating point variable it may different work on every palteform that's why we can use Strictfp keyword.
Strictfp class atul

Strictfp  interface my

Strictfp  void as()

Strictfp int a=10;   // not allowed 

Strictfp  atul()      //    constructor not allowed 






	



   

	

 

 







