Q1)charAt() function only take the number not a string or character.
it will find only this position have this character.

import java.io.*;
import java.lang.String.*;

class a
{
     	public static void main(String s[])
	{
    	 String name = "I am natasha";
    	 System.out.print(name.charAt(2));
     	//System.out.print(name.charAt('a'));  //ERROR                    // if you want to access the index value then you can use name.indexOf('a');
     	}
 }
..................................................................................................................................................
Q2)   How to input a value by using command line arguments.
class b {
        public static void main(String s[])
        {     
	final int a=10;
              	b ob= new b();
              	s[0]="a";
              	System.out.print(s[0]);    
        }
}

Save as:-  b.java
Compile :- javac b.java
Run :-   java b  
.........................................................................................................................................................
Q3)PROTECTED OVER DEFAULT ACCESS MODIFIER.
class A
{  
 	void msg()
	{
		System.out.println("Hello java");
	}  
} 
public class f extends A
{  
 	void msg()
	{
		System.out.println("Hello java");
	} 
 	public static void main(String args[])
	{  
   		f obj=new f();  
   		obj.msg();  
   }  
}  
...............................................................................................................................................................................
Q4) //using abstract class B? why?
 //   because a abstract class work as a normal class it shows that only.  and it show that abstract class can implements the interface.
Ok
interface A
{  
	void a();  
	void b();  
	void c();  
	void d();  
}  
abstract  class B implements A            
{                
	public void c()
	{
		System.out.println("I am c");
	}  
}  
class M extends B
{  
	public void a()
	{
		System.out.println("I am a");
	}  
	public void b()
	{
		System.out.println("I am b");
	}  
	public void d()
	{
		System.out.println("I am d");
	}  
}  
class e
{  
	public static void main(String args[])
	{  
		A a=new M();  
		a.a();  
		a.b();  
		a.c();  
		a.d();  
	}
} 


....................................................................................................................................................
Q5)ERROR IN CLONE

Some KeyWords are wrong.

class atul implements Cloneable
{
	int a;
	atul(int a)
	{
		this.a=a;
	}
	public Object clone()throws CloneNotSupportedException
	{
		return super.clone();
	}
	public static void main(String args[])
	{
		try
		{
			atul ob=new atul(10);
			atul obj=(atul)ob.clone();

			System.out.println(ob.a);
			System.out.println(obj.a);

		}catch(CloneNotSupportedException c)
		{}

	}
}
........................................................................................................
Q6)Anonymous object:- 
use a method on an object without assigning it to any reference. 
public class atul 
{
   	public String as()
	{
      		return "Hello";
   	}
 	public static void main(String[] args)
	{
      		System.out.println(new atul().as());      /////////We can't  create any reference the we can use the method(access the method).
   	}
 }   
.................................................................................................................
Q7) Constructor class - java.lang.reflect
//  Don't use in core java 
The java.lang.reflect.Constructor class provides information about, and access to, a single constructor for a class.
.......................................................................................................................
Q8)How `this` can be passed as argument in constructor call

this can be passed as argument in the constructor call.
class atul
{  
  	atul1 obj;  
  	atul(atul1 obj)
	{  
    		this.obj=obj;  
 	}  
  	void display()
	{  
    		System.out.println(obj.data);  
  	}  
}  
class atul1
{  
 	 int data=10;  
 	 atul1()
	{  
  		 atul b=new atul(this);  
   		b.display();  
  	}  
  	public static void main(String args[])
	{  
   		atul1 a=new atul1();  
  	}  
}  
................................................................................................................................
Q9)How `this` can be passed as argument in method 
class atul 
{
	void as(atul obj)
	{
		System.out.print("Hello");
	}
	void ar()
	{
		as(this);
	}
	public static void main(String s[])
	{
		atul ob=new atul();
		ob.ar();
	}
	
}
...............................................................................................................................................
Q10)How `this` can be used to return current class instance

class atul
{
	atul as()
	{
		return this;
	}
	void ps()
	{
		s.o.p("Hello");
	}
	ps.v.m()
	{
		new atul().as().ps();
	}

}
.........................................................................................................................................................
Q11)Int abc(int a, float b)
Int abc (long a,int b)
Function overloading or not ?Yes
class atul 
{
	int abc(int a, float b)
	{
		System.out.print("Hello");
		return  0;
	}
	int abc (long a,int b)
	{
		System.out.print("Hi");	
		return  0;	
	}
	public static void main(String s[])
	{
		atul ob=new atul();
		ob.abc(10,10.25f);
		ob.abc(28L,12);
	}	
}
............................................................................................................................................................
Q12)Diff b/w instance initializer and static block 
static block :-     It will execute first.before main function.     //class sta b main 
instance initializer:-     it will add the data. in to method .

..............................................................................................................................................................
Q13)Can we initialize variables in default method in interface?? What's there type ?
 An interface can have methods and variables just like the class but the methods declared in interface are by default abstract (only method signature, no body, see: Java abstract method). Also, the variables declared in an interface are public, static & final by default


interface my
{
	void as(int a);
}
..........................................................................................................................................................
Q14)How to access package by fully qualified name ??

import java.awt.event.ActionListener;

............................................................................................................................................................
Q15)What is Object class in java
The Object class is the parent class of all the classes in java by default. In other words, it is the topmost class of java.

The Object class is beneficial if you want to refer any object whose type you don't know. Notice that parent class reference variable can refer the child class object, know as upcasting.

to create a object of the class by using casting.
........................................................................................................................................................
Q16)Can we return array in java ?? How ??
(Yes).
public class ReturningAnArray
{
   	public int[] createArray() 
	{
      		Scanner sc = new Scanner(System.in);
     		System.out.println("Enter the size of the array that is to be created:: ");
    		int size = sc.nextInt();
     		 int[] myArray = new int[size];
      		System.out.println("Enter the elements of the array ::");

      		for(int i=0; i<size; i++) 
		{
         			myArray[i] = sc.nextInt();
      		}
     		 return myArray;
  	 }
	public static void main(String args[]) 
	{
      		ReturningAnArray obj = new ReturningAnArray();
     		 int arr[] = obj.createArray();
      		System.out.println("Array created is :: "+Arrays.toString(arr));
  	 }
}
.................................................................................................
Q17)Jagged array ?

int[][] arr = new int[3][];
        arr[0] = new int[5] { 1, 3, 5, 7, 9 };
        arr[1] = new int[4] { 2, 4, 6, 8 };
       arr[2] = new int[4] { 1, 7, 6, 8,0,9 };

1  3 5  7 9 
2 4 6  8
1  7 6  8 0 9
.............................................................................................................................
Q18)Class keyword ??


class atul
{
}
.......................................................................................................................
Q19)System.arraycopy(); ??

class Main {  
    	public static void main(String[] args)
	 {  
       		 //declaring a source array  
      		  char[] src_array = { 'S','o','f','t','w','a','r','e','T','e','s','t','i','n','g','H','e','l','p'}; 
  
        		char[] dest_array = new char[19];  
 
       		 System.arraycopy(src_array, 0, dest_array, 0,19);
        		System.out.println("Source array:" + String.valueOf(src_array));
 
       		 System.out.println("Destination array after arraycopy:"+ String.valueOf(dest_array));  
    }  
}  
...........................................................................................................................................
Q19)Can we do array cloning ?    
Yes  is we can copy a one array to any other array then we can ready the coloe of an array.
class Main 
{     
     	public static void main(String args[])  
    	{ 
     		int num_Array[] = {5,10,15,20,25,30}; 
 
    		 int clone_Array[] = num_Array.clone(); 
 
    		System.out.println("Original num_Array:");
   		 for (int i = 0; i <num_Array.length; i++) 
		{ 
           			 System.out.print(num_Array[i]+" "); 
       		 } 
        		System.out.println();
 
       		System.out.println("Cloned num_Array:");
       		for (int i = 0; i <clone_Array.length; i++) 
		{ 
           			 System.out.print(clone_Array[i]+" "); 
      		} 
      		System.out.println("\n");

 	} 
}
.........................................................................................................

Q20)Javadoc Tool ??
To create API Document.
package com.abc;
	/**  I am atul-
		I am amit*/
	public class atul
	{
		/** Hello Kr */
		publc static void add()
		{
			s.o.p("Hello");
		}
	}
javadoc atul.javac 
Create a multiple HTML file run a index.html
............................................................................................................................................................................
Q21)String intern ??
This method returns a canonical representation for the string object. It follows that for any two strings s and t, s.intern() == t.intern() is true if and only if s.equals(t) is true.
................................................................................................................................................................................
Q22)How to apply finally in exception handling ? 

class atul
{  
 	 public static void main(String args[])
	{  
 		
 		finally
		{
			System.out.println("finally block is always executed");
		}  
  		System.out.println("rest of the code...");  
 	 }  
}  
............................................................................................................................................................
Q23)Nested try in exception handling is possible??
Yes.
try 
{
	statement;
	try 
	{
		statements
	}
	catch()
	{
	}
}
catch()
{

}
...........................................................................................................................................................
Q24)java regex??
The Java Regex or Regular Expression is an API to define a pattern for searching or manipulating strings.
..............................................................................................................................................................
Q25)tokenizer ??
okenizer:-
I am atul.
i
am 
atul.
java.util.*;
public class atul
{
	void as()
	{
		StringTokenizer name=new  Tokenizer("I am atul");
		while(name.hasTokenizer())
		{
			s.o.p(name.nextToken());
		}
	}
	p.s.pvm()
	{
		
	}
}
I 
am 
 atul.
..........................................................................................................................................................................
Q26)In upcasting when we override a function then child class function is called 
and when we override a variable then base class variable is called ?? Why ??
class  atul
{
	void as()
	{
		int a=10;
		s.o..p("Hello");
	}
}
class atul1   extends atul
{
	void as()
	{
		int a=20;
		s.o..p("Hi");
	}
	p.s.v.m()
	{
		atul ob=new atul1();
		ob.as();				//Hi
	}
}
........
class  atul
{
	int a=10;
}
class atul1   extends atul
{
	int a=20;                        
	p.s.v.m()
	{
		atul ob=new atul1();
		s.o.p(ob.a);                                               //10
	}
}
.................................................................................................................................................




