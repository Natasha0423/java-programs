final:- 
1) final as variable 
		can't change value
class atul
{
	final a=10;
	atul()
	{
		a++;    // error  
		s.o.p(a);
	}
}
2) final method:- 
	final menthod can't override.
class atul
{
	final void as()
	{
		s.o.p("Hello");
	}
}
class atul1 extends atul
{
	void as()
	{
		s.o.p("Hi");
	}
}
3) final as a class:-
final class atul
{
	.........
}
class atul1 extends  atul     ///error
{
	.............
}
......................................................
class atul
{
	final a;
	atul()
	{
		a=10;
		s.o.p(a);
	}
	p.s.v.m.()
	{
		atul ob=new atul();
	}
}
Polymorphism:- 


Binding:- 

1) static binding:-
class atul
{	
	void as()
	{
		s.o.p("Hello");
	}
	p.s.v.m()
	{
		atul ob=new atul();
	}
}
2) Dynamic:- 
we can create a reference variable of base calss can be hold by the child class.
class atul
{
	 ..................
}

class atul1 extends atul
{
	....................
	p.s.v.m()
	{
		atul ob=new atul1();
	}
}

intanceof :- 
class atul
{
	void as()
	{
		...............
	}
	p.s.v.m()
	{
		atul ob=new atul();
		s.o.p(ob  intanceof   atul);
	}
}
true 
........................................................
class atul
{
	atul()
	{
	}
	atul(int a)
	{
	}
}
class atul1 extends atul 
{
	atul1(int a)
	{
	}
	p.s.v.m()
	{
		atul ob=new atul1();    upcasting 
		s.o.p(ob intanceof atul);
	}
}
........................................................
down casting:- 
class atul
{
	
}
class atl1  extends  atul
{
	void as(atul p)
	{
		atul1 obj=(atu1)p;
		s.o.p("hello");
	}
	p.s.v.m()
	{
		atul ob=new atul1();
		atul1.as(ob);
	}
}
...................................................................................................
abstarct class :-
abstract class atul
{
	atul()
	{
		s.o.p("Atul");
	}
	abstract void as();
	void ad()
	{
		s.o.p("hi");
	}
}
class atul1 extends atu
{
	void as()
	{	
		s.o.p.("Hello");
	}
	p.s.v.m()
	{
		
	}
}
.............................................
Inner Class:-
class Outer
{
	void as()
	{
		s.o.p("Hello");
	}
	class Inner
	{
		void ps()
		{
			s.o.p("Hi")
		}
	}
	
	p.s.v.m()
	{
		Outer o=new Outer();
		o.as();
		Outer.Inner I=o.new Inner();
		I.ps();
	}
}
....................................................................................
class Outer
{
	void as()
	{
		s.o.p("Hello");
	}
	class Inner
	{
		void ps()
		{
			s.o.p("Hi")
		}
		class Inner1
		{
			void ds()
			{
				s.o.p("Hi")
			}
		}
	}
	
	p.s.v.m()
	{
		
	}
}
......................................................................................................................................
class Outer
{
	void as()
	{
		s.o.p("Hello");
	}
	class Inner
	{
		void ps()
		{
			s.o.p("Hi")
		}
		
	}
	class Inner1
	{
		void ds()
		{
			s.o.p("Hi")
		}
	}
	p.s.v.m()
	{
		
	}
}
........................................................................................................................................

Interface:

interface my
{
	void as();
}
interface my1
{
	void pd();
}
class atul implements my,my1
{	
	void as()
	{
		s.o.p("Hello");
	}
}
.......................................................................................
interface my
{
	void a();
	void b();
	void c();
}
class atul  implements my
{
	void a()
	{
		s.o.p("Hello");
	}
	void ps()
	{
		
	}
}
class atul1  implements my
{
	void a()
	{
		s.o.p("Hello");
	}
	void b()
	{
		s.o.p("hi");
	}
}
................................................
interface my
{
	void a();
	interface my1
	{
		void b();
	}
}
classatul implements my.my1
{
	void a()
	{
	}
	void b()
	{
	}
	p.s.vm()
	{
		my.my1 ob=new atul();
		ob.b();
	}
}









